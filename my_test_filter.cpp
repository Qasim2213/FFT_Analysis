// #include <filters.h>

// const int16_t sine50Hz[] = {
//   512, 536, 560, 584, 607, 630, 652, 674, 695, 715, 735, 754, 772, 789, 805, 820, 834, 848, 860, 872,
//   883, 893, 902, 910, 917, 923, 929, 933, 937, 940, 942, 944, 944, 944, 942, 940, 937, 933, 929, 923,
//   917, 910, 902, 893, 883, 872, 860, 848, 834, 820, 805, 789, 772, 754, 735, 715, 695, 674, 652, 630,
//   607, 584, 560, 536, 512, 487, 463, 440, 416, 393, 369, 346, 323, 300, 277, 254, 231, 208, 185, 162,
//   139, 116, 93, 70, 47, 24, 2, -21, -43, -65, -87, -109, -131, -153, -175, -196, -218, -239, -260, -280,
//   -300, -319, -338, -357, -376, -395, -414, -433, -452, -471, -489, -507, -525, -543, -561, -578, -595, -611,
//   -627, -642, -657, -672, -687, -701, -715, -728, -742, -755, -768, -781, -793, -805, -817, -828, -839, -850,
//   -839, -828, -817, -805, -793, -781, -768, -755, -742, -728, -715, -701, -687, -672, -657, -642, -627, -611,
//   -595, -578, -561, -543, -525, -507, -489, -471, -452, -433, -414, -395, -376, -357, -338, -319, -300, -280,
//   -260, -239, -218, -196, -175, -153, -131, -109, -87, -65, -43, -21, 2, 24, 47, 70, 93, 116, 139, 162,
//   185, 208, 231, 254, 277, 300, 323, 346, 369, 393, 416, 440, 463, 487, 512
// };


// const uint16_t squareWave_1kHz_256samples[] = {
//   1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
//   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//   1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
//   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//   1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
//   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//   1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
//   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//   1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
//   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//   1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
//   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
//   1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
//   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//   1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
//   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//   1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
//   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//   1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
//   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//   1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
//   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//   1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
//   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
//   1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
//   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//   1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
//   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//   1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
//   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//   1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
//   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//   1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
//   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//   1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
//   0, 0, 0, 0, 0, 0, 0, 0, 0, 0
// };

// const float cutoff_freq = 200.0;
// const float sampling_time = 0.0001;
// Filter fhp(cutoff_freq, sampling_time, IIR::ORDER::OD3, IIR::TYPE::HIGHPASS);

// int s1i = 0, s2i = 0;
// float sign_raw, sign_filt;

// void setup() {
//   Serial.begin(115200);
//   Serial.print("Square wave : ");
//   for (int i = 0; i < 256; i++) {
//     Serial.print(squareWave_1kHz_256samples[i]);
//     if (i < 255) Serial.print(", ");
//   }
//   Serial.println();
  
//   Serial.print("Sine wave : ");
//   for (int i = 0; i < 256; i++) {
//     Serial.print(sine50Hz[i]);
//     if (i < 255) Serial.print(", ");
//   }
//   Serial.println();

//   Serial.print("Original signal : ");
//   for (int i = 0; i < 256; i++) {
//     sign_raw = (float)(squareWave_1kHz_256samples[i] + sine50Hz[s2i]);
//     Serial.print((int)sign_raw);
//     if (i < 255) Serial.print(", ");
//     s2i = (s2i + 1) % 200;
//   }
//   Serial.println();

//   Serial.print("Filtered signal : ");
//   for (int i = 0; i < 256; i++) {
//     sign_raw = (float)(squareWave_1kHz_256samples[i] + sine50Hz[s2i]);
//     sign_filt = fhp.filterIn(sign_raw);
//     Serial.print((int)sign_filt);
//     if (i < 255) Serial.print(", ");
//     s2i = (s2i + 1) % 200;
//   }
//   Serial.println();
// }

// void loop() {
// }
