import serial
import time
import matplotlib.pyplot as plt

# # Set up serial connection (adjust port name accordingly)
# ser = serial.Serial('COM3', 115200)  # Change 'COM3' to your Arduino port
# time.sleep(2)  # Wait for Arduino to initialize

# Arrays to store the signals

square_wave = [1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 0, 0, 0, 0, 0, 0]
sine_wave = [512, 536, 560, 584, 607, 630, 652, 674, 695, 715, 735, 754, 772, 789, 805, 820, 834, 848, 860, 872,
  883, 893, 902, 910, 917, 923, 929, 933, 937, 940, 942, 944, 944, 944, 942, 940, 937, 933, 929, 923,
  917, 910, 902, 893, 883, 872, 860, 848, 834, 820, 805, 789, 772, 754, 735, 715, 695, 674, 652, 630,
  607, 584, 560, 536, 512, 487, 463, 440, 416, 393, 369, 346, 323, 300, 277, 254, 231, 208, 185, 162,
  139, 116, 93, 70, 47, 24, 2, -21, -43, -65, -87, -109, -131, -153, -175, -196, -218, -239, -260, -280,
  -300, -319, -338, -357, -376, -395, -414, -433, -452, -471, -489, -507, -525, -543, -561, -578, -595, -611,
  -627, -642, -657, -672, -687, -701, -715, -728, -742, -755, -768, -781, -793, -805, -817, -828, -839, -850,
  -839, -828, -817, -805, -793, -781, -768, -755, -742, -728, -715, -701, -687, -672, -657, -642, -627, -611,
  -595, -578, -561, -543, -525, -507, -489, -471, -452, -433, -414, -395, -376, -357, -338, -319, -300, -280,
  -260, -239, -218, -196, -175, -153, -131, -109, -87, -65, -43, -21, 2, 24, 47, 70, 93, 116, 139, 162,
  185, 208, 231, 254, 277, 300, 323, 346, 369, 393, 416, 440, 463, 487, 512
]
original_signal = [
    2780.0, 2681.0, 2696.0, 2700.0, 2714.0, 2698.0, 2730.0, 2750.0, 2750.0, 2761.0,
    2760.0, 2743.0, 2777.0, 2748.0, 2745.0, 2701.0, 2716.0, 2728.0, 2730.0, 2748.0,
    2712.0, 2719.0, 2766.0, 2718.0, 2793.0, 2729.0, 2717.0, 2735.0, 2717.0, 2734.0,
    2715.0, 2713.0, 2716.0, 2733.0, 2747.0, 2714.0, 2717.0, 2698.0, 2761.0, 2743.0,
    2714.0, 2716.0, 2697.0, 2731.0, 2762.0, 2702.0, 2698.0, 2695.0, 2679.0, 2696.0,
    2666.0, 2656.0, 2632.0, 2649.0, 2715.0, 2635.0, 2617.0, 2604.0, 2605.0, 2601.0,
    2587.0, 2574.0, 2554.0, 2551.0, 2526.0, 2522.0, 2505.0, 2495.0, 2477.0, 2462.0,
    2472.0, 2439.0, 2398.0, 2427.0, 2399.0, 2392.0, 2376.0, 2347.0, 2328.0, 2344.0,
    2282.0, 2366.0, 2282.0, 2331.0, 2252.0, 2187.0, 2204.0, 2231.0, 2200.0, 2191.0,
    2184.0, 2172.0, 2137.0, 2140.0, 2125.0, 2137.0, 2112.0, 2105.0, 2088.0, 2088.0,
    2063.0, 2030.0, 2041.0, 2024.0, 2027.0, 2015.0, 1998.0, 1966.0, 1966.0, 1976.0,
    1963.0, 1946.0, 2012.0, 1947.0, 1949.0, 2024.0, 1947.0, 2040.0, 1976.0, 1995.0,
    2010.0, 1982.0, 1983.0, 2030.0, 2013.0, 2007.0, 2014.0, 2028.0, 2041.0, 2029.0,
    2015.0, 2011.0, 2026.0, 2042.0, 2044.0, 2025.0, 2028.0, 2010.0, 2040.0, 2048.0,
    2079.0, 2016.0, 2094.0, 2047.0, 2058.0, 2048.0, 2059.0, 2144.0, 2076.0, 2091.0,
    2107.0, 2089.0, 2125.0, 2136.0, 2106.0, 2136.0, 2137.0, 2153.0, 2157.0, 2158.0,
    2169.0, 2185.0, 2191.0, 2215.0, 2223.0, 2231.0, 2237.0, 2252.0, 2283.0, 2283.0,
    2301.0, 2316.0, 2312.0, 2328.0, 2346.0, 2351.0, 2366.0, 2377.0, 2409.0, 2424.0,
    2432.0, 2441.0, 2473.0, 2489.0, 2508.0, 2511.0, 2508.0, 2523.0, 2526.0, 2537.0,
    2553.0, 2572.0, 2576.0, 2601.0, 2600.0, 2616.0, 2632.0, 2637.0, 2651.0, 2667.0,
    2656.0, 2685.0, 2684.0, 2712.0, 2717.0, 2716.0, 2728.0, 2731.0, 2746.0, 2746.0,
    2743.0, 2732.0, 2730.0, 2728.0, 2748.0, 2731.0, 2732.0, 2712.0, 2729.0, 2745.0,
    2682.0, 2731.0, 2720.0, 2730.0, 2719.0, 2719.0, 2701.0, 2733.0, 2743.0, 2745.0,
    2704.0, 2716.0, 2715.0, 2736.0, 2747.0, 2713.0, 2718.0, 2701.0, 2734.0, 2744.0,
    2714.0, 2698.0, 2712.0, 2731.0, 2727.0, 2712.0, 2696.0, 2694.0, 2687.0, 2682.0,
    2653.0, 2664.0, 2639.0, 2649.0, 2639.0, 2617.0
]
filtered_signal = [
    541.7, 368.8, 317.8, 257.7, 210.3, 137.3, 115.8, 83.8, 35.7, 3.0,
    -37.2, -87.0, -81.9, -135.3, -155.9, -210.3, -199.9, -190.5, -188.8, -169.5,
    -200.5, -184.7, -130.5, -169.8, -86.6, -142.3, -140.5, -108.8, -112.9, -82.1,
    -87.4, -74.9, -58.0, -29.2, -6.1, -29.7, -16.4, -25.0, 44.7, 29.5,
    5.4, 13.1, 0.0, 38.2, 68.5, 8.8, 8.6, 9.2, -2.6, 18.0,
    -8.1, -12.4, -29.0, -4.9, 62.5, -15.9, -26.7, -31.2, -21.5, -17.4,
    -22.8, -26.4, -35.7, -27.4, -40.3, -31.4, -35.3, -31.7, -35.5, -35.5,
    -11.5, -30.6, -54.4, -9.0, -22.2, -13.9, -14.8, -27.5, -29.0, 3.0,
    -42.0, 55.8, -16.2, 45.2, -21.4, -66.6, -28.7, 14.6, -1.8, 4.4,
    11.6, 13.2, -7.2, 10.5, 9.1, 33.1, 19.0, 23.2, 17.2, 27.6,
    12.9, -7.7, 15.4, 9.4, 22.6, 19.9, 12.6, -8.2, 3.7, 23.4,
    18.9, 10.9, 81.5, 19.8, 27.9, 103.0, 25.3, 115.7, 46.6, 62.7,
    72.2, 39.3, 36.8, 77.2, 51.7, 38.8, 39.0, 45.1, 49.0, 28.2,
    7.5, -1.4, 8.5, 18.1, 13.2, -11.0, -11.6, -31.7, -3.9, 0.1,
    25.1, -41.3, 32.9, -19.3, -10.7, -22.6, -13.1, 64.8, -10.8, 0.5,
    11.3, -11.2, 19.8, 23.4, -12.2, 12.8, 7.5, 16.7, 13.4, 7.5,
    11.5, 19.6, 17.0, 31.4, 28.6, 25.7, 20.9, 24.8, 42.9, 29.1,
    33.4, 33.9, 16.1, 18.8, 22.8, 13.8, 15.1, 12.2, 29.2, 27.8,
    19.6, 13.0, 28.5, 26.8, 27.7, 13.1, -5.6, -5.1, -15.9, -17.6,
    -14.3, -8.2, -16.9, -4.6, -18.0, -13.6, -9.6, -16.2, -13.4, -8.8,
    -29.9, -10.6, -21.6, -3.7, -9.5, -20.0, -16.9, -22.3, -15.5, -23.3,
    -32.6, -47.9, -52.2, -55.3, -36.5, -54.1, -52.0, -69.0, -48.3, -30.3,
    -88.0, -32.6, -39.5, -25.3, -32.1, -27.3, -39.6, -2.9, 8.8, 11.6,
    -26.5, -10.0, -7.5, 15.5, 26.1, -7.0, 0.4, -13.7, 20.9, 29.6,
    -0.7, -14.3, 2.1, 21.2, 16.1, 1.1, -13.1, -12.2, -16.0, -17.3,
    -40.6, -23.1, -41.0, -23.5, -26.4, -39.8
]

# # Read and process data from serial monitor
# for _ in range(4):  # We are reading 4 sections
#     line = ser.readline().decode('utf-8').strip()
    
#     if line.startswith("Square wave :"):
#         square_wave = list(map(int, line[len("Square wave : "):].split(', ')))
#     elif line.startswith("Sine wave :"):
#         sine_wave = list(map(int, line[len("Sine wave : "):].split(', ')))
#     elif line.startswith("Original signal :"):
#         original_signal = list(map(int, line[len("Original signal : "):].split(', ')))
#     elif line.startswith("Filtered signal :"):
#         filtered_signal = list(map(int, line[len("Filtered signal : "):].split(', ')))

# # Close the serial connection
# ser.close()

# Plot the signals
plt.figure(figsize=(10, 6))

# Plot square wave
plt.subplot(2, 2, 1)
plt.plot(square_wave, label='Square Wave', color='b')
plt.title('Square Wave')
plt.xlabel('Sample Index')
plt.ylabel('Amplitude')
plt.grid(True)

# Plot sine wave
plt.subplot(2, 2, 2)
plt.plot(sine_wave, label='Sine Wave', color='g')
plt.title('Sine Wave')
plt.xlabel('Sample Index')
plt.ylabel('Amplitude')
plt.grid(True)

# Plot original signal
plt.subplot(2, 2, 3)
plt.plot(original_signal, label='Original Signal', color='r')
plt.title('Original Signal (Square + Sine)')
plt.xlabel('Sample Index')
plt.ylabel('Amplitude')
plt.grid(True)

# Plot filtered signal
plt.subplot(2, 2, 4)
plt.plot(filtered_signal, label='Filtered Signal', color='orange')
plt.title('Filtered Signal')
plt.xlabel('Sample Index')
plt.ylabel('Amplitude')
plt.grid(True)

# Display all plots
plt.tight_layout()
plt.show()
